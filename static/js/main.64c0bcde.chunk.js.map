{"version":3,"sources":["components/BacklitScreen.js","components/NumberKeypad.js","actions/ForgetCodeAction.js","actions/types.js","App.js","serviceWorker.js","reducers/ForgetCodeReducer.js","reducers/index.js","store.js","index.js"],"names":["BacklitScreen","statusMsg","passCode","secretMasterCode","isLocked","lightOn","className","NumberKeypad","enterPassCode","lockTheDoor","unlockTheDoor","keypad","i","push","key","onClick","renderKeypadKeys","checkSecretMasterCode","code","dispatch","a","fetch","then","res","json","result","sn","type","catch","err","App","handler","window","useState","setStatusMsg","setPassCode","setIsLocked","hashedCode","sethashedCode","setLightOn","unlock","setUnlock","unlockWithSMC","setUnlockWithSMC","lightInterval","setLightInterval","delayInterval","setDelayInterval","msgInterval","setMsgInterval","allowSecretMasterCode","setallowSecretMasterCode","setSecretMasterCode","useDispatch","isCodeCorrect","useSelector","state","forgetCode","useEffect","localStorageCode","localStorage","getItem","clearTimeout","unlockWithSecretMasterCode","character","setTimeout","length","bcrypt","hash","setItem","compare","removeItem","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","error","INITIAL_STATE","allReducers","combineReducers","action","middleware","thunk","store","createStore","compose","applyMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.64c0bcde.chunk.js","sourcesContent":["import React from 'react';\n\nfunction BacklitScreen({statusMsg, passCode, secretMasterCode, isLocked, lightOn}) {\n    return (\n        <div className={\"backlit_screen \" + (lightOn ? \"backlit_screen--light_on\" : \"\")}>\n            <div className=\"backlit_screen__is_locked\">{!!isLocked ? 'Locked' : 'Unlocked'}</div>\n            <div className=\"backlit_screen__status_msg\">{passCode ? !!secretMasterCode ? secretMasterCode : passCode : statusMsg}</div>            \n        </div>\n    )\n};\n\nexport default BacklitScreen;\n","import React from 'react';\n\nfunction NumberKeypad({enterPassCode, lockTheDoor, unlockTheDoor}) {\n    \n\n    const renderKeypadKeys = () => {\n        const keypad = [];\n        for (let i = 3; i > 0; i--) {\n                keypad.push(<div key={i*3-2} onClick={() => enterPassCode(i*3-2)} className=\"number_keypad__key\">{i*3-2}</div>)   \n                keypad.push(<div key={i*3-1} onClick={() => enterPassCode(i*3-1)} className=\"number_keypad__key\">{i*3-1}</div>)   \n                keypad.push(<div key={i*3} onClick={() => enterPassCode(i*3)} className=\"number_keypad__key\">{i*3}</div>)   \n            }\n        keypad.push(<div key={'*'} onClick={() => enterPassCode('*')} className=\"number_keypad__key\">*</div>)   \n        keypad.push(<div key={0} onClick={() => enterPassCode(0)} className=\"number_keypad__key\">0</div>)   \n        keypad.push(<div key={'L'} onClick={() => lockTheDoor()} className=\"number_keypad__key\">L</div>)   \n        \n        return keypad;\n    };\n\n    return (\n        <div className=\"number_keypad\">\n            {renderKeypadKeys()}\n        </div>\n    )\n};\n\nexport default NumberKeypad;\n","import { CODE_CORRECT, CODE_INCORRECT } from './types';\n\nexport const checkSecretMasterCode = (code) => {\n    return async (dispatch) => {\n        fetch(`https://9w4qucosgf.execute-api.eu-central-1.amazonaws.com/default/CR-JS_team_M02a?code=${code}`)\n            .then(res => res.json())\n            .then((result) => {\n                if(result.sn === '4815162342') {\n                    return dispatch({\n                        type: CODE_CORRECT\n                    })\n                } else {\n                    return dispatch({\n                        type: CODE_INCORRECT\n                    })\n                }\n            })\n            .catch(err => dispatch({\n                type: CODE_INCORRECT\n            }))\n    }\n}","export const CODE_CORRECT = \"CODE_CORRECT\";\nexport const CODE_INCORRECT = \"CODE_INCORRECT\";\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux'\nimport bcrypt from 'bcryptjs';\n\nimport { BacklitScreen, NumberKeypad } from './components';\n\nimport { checkSecretMasterCode } from './actions/ForgetCodeAction';\n\nimport './App.scss';\n\nfunction App(handler, element = window) {\n\n  const [statusMsg, setStatusMsg] = useState('Ready');\n  const [passCode, setPassCode] = useState('');\n  const [isLocked, setIsLocked] = useState(false);\n  const [hashedCode, sethashedCode] = useState('');\n  const [lightOn, setLightOn] = useState(false);\n  const [unlock, setUnlock] = useState(false);\n  const [unlockWithSMC, setUnlockWithSMC] = useState(false);\n  const [lightInterval, setLightInterval] = useState(null);\n  const [delayInterval, setDelayInterval] = useState(null);\n  const [msgInterval, setMsgInterval] = useState(null);\n  const [allowSecretMasterCode, setallowSecretMasterCode] = useState(false);\n  const [secretMasterCode, setSecretMasterCode] = useState('');\n  \n  const dispatch = useDispatch();\n  const isCodeCorrect = useSelector(state => state.forgetCode.isCodeCorrect);\n  \n  useEffect(() => {\n    const localStorageCode = localStorage.getItem('code');\n    if(!!localStorageCode) {\n      setIsLocked(true);\n      sethashedCode(localStorageCode);\n    }; \n    return () => {\n      clearTimeout(lightInterval);\n      clearTimeout(delayInterval);\n      clearTimeout(msgInterval);\n    }\n  }, []);\n\n  useEffect(() => {\n    if(!!unlock) {\n    \n        unlockTheDoor();\n      \n      }\n    if(!!unlockWithSMC) {\n        \n        unlockWithSecretMasterCode();\n    \n      }\n  }, [unlock, unlockWithSMC])\n\n  const enterPassCode = (character) => {\n    \n    clearTimeout(msgInterval);\n    clearTimeout(lightInterval);\n    clearTimeout(delayInterval);\n\n    setLightOn(true);\n    setLightInterval(\n      setTimeout(() => { \n        setLightOn(false);\n        setPassCode('');\n      }, 5000));\n\n    if(!isLocked) {\n      \n      if(character !== '*'){\n        if(passCode.length < 6 ) {\n    \n          setPassCode(passCode + character);\n        \n        } else {\n        \n          setPassCode('');\n          setStatusMsg('Error');\n    \n      }\n      } else {\n\n          setPassCode('');\n          setStatusMsg('Error');\n    \n        }\n    } else {\n      if(!allowSecretMasterCode) {\n\n        setPassCode(passCode + character);\n        setDelayInterval(setTimeout(() => setUnlock(true), 1200));\n\n      } else {\n\n        setSecretMasterCode(secretMasterCode + character);\n        setDelayInterval(setTimeout(() => setUnlockWithSMC(true), 1200));\n      \n      }\n    \n    }\n  };\n\n  const lockTheDoor = async () => {\n\n    if(!isLocked) {\n\n      if(passCode.length === 6 && passCode !== '000000') {\n\n        const hashedCode = await bcrypt.hash(passCode, 12);\n        localStorage.setItem('code', hashedCode);\n        sethashedCode(hashedCode);\n        setStatusMsg('Locking');\n        setIsLocked(true);\n\n      } else {\n\n        setStatusMsg('Error');\n\n      } \n\n      setPassCode('');\n      setMsgInterval(setTimeout(() => setStatusMsg('Ready'), 3000));\n\n    } else {\n      if(!allowSecretMasterCode) {\n\n        setPassCode(passCode + 'L');\n        setDelayInterval(setTimeout(() => setUnlock(true), 1200));\n        \n      } else {\n        \n        setSecretMasterCode(secretMasterCode + 'L');\n        setDelayInterval(setTimeout(() => setUnlockWithSMC(true), 1200));\n\n      }\n      clearTimeout(delayInterval);\n\n    }\n  };\n  const unlockTheDoor = async () => {\n\n      if(passCode === '000000') {\n\n        setPassCode('');\n        setallowSecretMasterCode(true);\n        setStatusMsg('Service');\n      \n      } else {\n        if(!!(await bcrypt.compare(passCode, hashedCode))) {\n\n          setStatusMsg('Unlocking');\n          setIsLocked(false);\n          sethashedCode('');\n          localStorage.removeItem('code');\n\n\n      } else  {\n\n          setStatusMsg('Error') ;\n\n      }\n\n      setPassCode('');\n      setUnlock(false);\n      setMsgInterval(setTimeout(() => setStatusMsg('Ready'), 3000));\n    }\n\n};\n\n  const unlockWithSecretMasterCode = async () => {\n    if(secretMasterCode.length > 0) {\n      await dispatch(checkSecretMasterCode(secretMasterCode));\n      setSecretMasterCode('');\n      if(isCodeCorrect) {\n        setStatusMsg('Unlocking');\n        sethashedCode('');\n        setIsLocked(false);\n        localStorage.removeItem('code');\n        \n      } else {\n\n        setStatusMsg('Error');\n        \n      }\n      setUnlockWithSMC(false);\n    } \n};\n  return (\n    <div className=\"panel\">\n      <BacklitScreen\n        statusMsg={statusMsg}\n        passCode={passCode}\n        secretMasterCode={secretMasterCode}\n        isLocked={isLocked}\n        lightOn={lightOn}\n      />\n      <NumberKeypad\n        enterPassCode={enterPassCode}\n        lockTheDoor={lockTheDoor}\n        unlockTheDoor={unlockTheDoor}\n      />\n      <p>S/N: 4815162342</p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CODE_CORRECT, CODE_INCORRECT } from '../actions/types';\n\nconst INITIAL_STATE = {\n    secretMasterCode: '',\n    isCodeCorrect: false\n};\n\nexport default (state = INITIAL_STATE, action) => {\n    switch(action.type) {\n        case CODE_CORRECT: \n            return {\n                ...state, isCodeCorrect: true\n            }\n        case CODE_INCORRECT: \n            return {\n                ...state, isCodeCorrect: false\n            }\n        default:\n            return state\n    }\n}","import { combineReducers } from 'redux';\n\nimport forgetCodeReducer from './ForgetCodeReducer';\n\nconst allReducers = combineReducers({\n    forgetCode: forgetCodeReducer\n});\n\nexport default allReducers;","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport allReducers from './reducers';\n\nconst middleware = [thunk];\n\nconst store = createStore(\n    allReducers,\n    compose(\n        applyMiddleware(...middleware)\n    )\n);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n      document.getElementById('root')\n);\n\n\nserviceWorker.register();\n"],"sourceRoot":""}